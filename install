#!/usr/bin/env python
import os
from colorama import Fore

doGlobal = False
if 'npm_config_global' in os.environ:
	doGlobal = True if os.environ['npm_config_global'] == 'true' else False

configFileName = 'config.json'
scriptPath = '/etc/systemd/system' if doGlobal else './systemd'
fileName = 'filesync'

doPam = False
if 'npm_config_pam_module' in os.environ:
	doPam = True if os.environ['npm_config_pam_module'] == 'true' else False
elif 'npm_package_config_pam_module' in os.environ:
	doPam = True if os.environ['npm_package_config_pam_module'] == 'true' else False

if 'npm_config_binroot' in os.environ:
	binroot = os.environ['npm_config_binroot']
else:
	binroot = '/usr/local/bin' if doGlobal else './bin'

if 'npm_config_etcroot' in os.environ:
	etcroot = os.environ['npm_config_etcroot']
else:
	etcroot = '/etc/filesync' if doGlobal else './etc'

if 'npm_config_libroot' in os.environ:
	libroot = os.environ['npm_config_libroot']
else:
	libroot = '/usr/local/lib/filesync' if doGlobal else './lib'

if 'npm_config_pam_module_path' in os.environ:
	pamPath = os.environ['npm_config_pam_module_path']
elif 'npm_package_config_pam_module_path' in os.environ:
	pamPath = os.environ['npm_package_config_pam_module_path']
else:
	pamPath = 'http-auth.so'
pamModule = os.path.basename(pamPath)

if 'npm_config_port' in os.environ:
	port = int(os.environ['npm_config_port'])
elif 'npm_package_config_port' in os.environ:
	port = int(os.environ['npm_package_config_port'])
else:
	port = 2000



systemDShell = '''\
[Unit]
Description=Syncs files with a server when they change
Wants=network.target
After=network.target

[Service]
ExecStart=%(bin)s --port %(port)d --config %(etc)s
WorkingDirectory=%(dir)s
Restart=always

[Install]
WantedBy=multi-user.target\
''' % {'bin' : binroot, 'dir' : libroot, 'port' : port, 'etc' : etcroot}

try:
	if os.path.exists(scriptPath) != True:
		os.makedirs(scriptPath, 0755)

	systemdPath = os.path.join(scriptPath, 'filesync.service')
	file = open(systemdPath, 'w')
	file.write(systemDShell)
	file.close()
except IOError as (errno, error):
	print Fore.RED + 'IO Error: %(errno)s %(error)s' % {'errno' : errno, 'error' : error} + Fore.RESET
else:
	print Fore.CYAN + 'Systemd service file created: %s' % systemdPath + Fore.RESET

if doPam == True:
	print Fore.GREEN + '''
PAM module saved to: %(path)s.
For security reasons, the module is not active.
The module must be activated by editing the PAM config file(s) at /etc/pam.d.

Add something like the following example:
	auth sufficient %(module)s url=https://localhost:%(port)d
	account sufficient %(module)s\
''' % {'port' : port, 'module' : pamModule, 'path' : pamPath} + Fore.RESET
